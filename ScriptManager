local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/duckshogun09/DuckXHub/refs/heads/main/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/duckshogun09/DuckXHub/refs/heads/main/InterfaceManager.lua"))()

getgenv().Fluent = Fluent

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local VirtualUser = game:GetService("VirtualUser")

local Window = Fluent:CreateWindow({
    Title = "DuckXHub",
    SubTitle = "by duckfankurumi",
    TabWidth = 150,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local MinimizeKey = Enum.KeyCode.LeftControl
if Fluent._minimizeKey then
    MinimizeKey = Fluent._minimizeKey
end

local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Scripts = Window:AddTab({ Title = "Scripts", Icon = "file" }),
    Server = Window:AddTab({ Title = "Server", Icon = "server" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Info Tab
Tabs.Info:AddParagraph({
    Title = "DuckXHub Info",
    Content = "Welcome to DuckXHub Script Manager!\nEnjoy managing your scripts with Our Script Manager."
})

Tabs.Info:AddToggle("AntiAFK", { Title = "Anti-AFK", Default = true }):OnChanged(function(state)
    if state then
        if not getgenv().AntiAFKConnection then
            getgenv().AntiAFKConnection = LocalPlayer.Idled:Connect(function()
                VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                task.wait(1)
                VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)
        end
    else
        if getgenv().AntiAFKConnection then
            getgenv().AntiAFKConnection:Disconnect()
            getgenv().AntiAFKConnection = nil
        end
    end
end)

-- Script Management
local fixedScriptFolder = "DuckXHub/ScriptFiles"
if not isfolder("DuckXHub") then makefolder("DuckXHub") end
if not isfolder(fixedScriptFolder) then makefolder(fixedScriptFolder) end

local NewScriptUID, NewScriptContent, SelectedUID = "", "", nil

local function getUIDList()
    local list = {}
    for _, file in ipairs(listfiles(fixedScriptFolder)) do
        local name = file:match("([^/\\]+)%.lua$")
        if name and name:match("^%d+_script$") then
            local uid = name:match("^(%d+)_") or name
            table.insert(list, uid)
        end
    end
    table.sort(list)
    return list
end

local UIDDropdown = Tabs.Scripts:AddDropdown("UIDList", {
    Title = "Saved Scripts",
    Values = getUIDList(),
    Multi = false,
    Default = nil
})

UIDDropdown:OnChanged(function(value)
    SelectedUID = value
end)

Tabs.Scripts:AddButton({
    Title = "Add Script",
    Callback = function()
        local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
        ScreenGui.Name = "DuckXHubAddGui"

        local Frame = Instance.new("Frame", ScreenGui)
        Frame.Size = UDim2.new(0, 400, 0, 300)
        Frame.Position = UDim2.new(0.5, -200, 0.5, -150)
        Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        Frame.BorderSizePixel = 0

        local UIDBox, ScriptBox

        local function addTextBox(labelText, defaultText, posY)
            local Label = Instance.new("TextLabel", Frame)
            Label.Text = labelText
            Label.Position = UDim2.new(0, 10, 0, posY)
            Label.Size = UDim2.new(0, 80, 0, 25)
            Label.TextColor3 = Color3.new(1, 1, 1)
            Label.BackgroundTransparency = 1
            Label.TextXAlignment = Enum.TextXAlignment.Left

            local TextBox = Instance.new("TextBox", Frame)
            TextBox.Text = defaultText
            TextBox.Position = UDim2.new(0, 100, 0, posY)
            TextBox.Size = UDim2.new(0, 280, 0, 25)
            TextBox.TextColor3 = Color3.new(1, 1, 1)
            TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            TextBox.ClearTextOnFocus = false
            return TextBox
        end

        UIDBox = addTextBox("UID:", "", 10)
        ScriptBox = addTextBox("Script:", "", 45)

        local function addButton(text, posY, callback)
            local Button = Instance.new("TextButton", Frame)
            Button.Text = text
            Button.Position = UDim2.new(0, 10, 0, posY)
            Button.Size = UDim2.new(1, -20, 0, 30)
            Button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            Button.TextColor3 = Color3.new(1, 1, 1)
            Button.MouseButton1Click:Connect(callback)
        end

        addButton("üíæ Save", 90, function()
    local editedUID = UIDBox.Text
    local editedScript = ScriptBox.Text

    if editedScript == "" then
        Fluent:Notify({ Title = "Missing Info", Content = "Please enter script content.", Duration = 3 })
        return
    end

    local filename
    if editedUID == "" then
        filename = "default_script.lua"
    else
        filename = editedUID .. "_script.lua"
    end

    local path = fixedScriptFolder .. "/" .. filename

    if isfile(path) then
        Fluent:Notify({ Title = "Overwrite Warning", Content = "Script already exists, overwriting.", Duration = 3 })
    end

    -- L∆∞u n·ªôi dung: n·∫øu c√≥ UID th√¨ l∆∞u UID + script, n·∫øu kh√¥ng th√¨ ch·ªâ l∆∞u script
    local content = editedUID == "" and editedScript or (editedUID .. "\n" .. editedScript)
    writefile(path, content)

    UIDDropdown:SetValues(getUIDList())
    Fluent:Notify({ Title = "Saved", Content = "Script added as " .. filename, Duration = 3 })
    ScreenGui:Destroy()
end)

        addButton("‚ùå Cancel", 130, function()
            ScreenGui:Destroy()
        end)
    end
})

Tabs.Scripts:AddButton({
    Title = "Manage Selected ScriptUID",
    Callback = function()
        if not SelectedUID then
            Fluent:Notify({ Title = "Select ScriptUID", Content = "Please select a ScriptUID", Duration = 3 }); return
        end

        local filePath
        for _, f in ipairs(listfiles(fixedScriptFolder)) do
            if f:match("([^/\\]+)%.lua$"):find("^" .. SelectedUID .. "_") then
                filePath = f
                break
            end
        end

        if not filePath or not isfile(filePath) then
            Fluent:Notify({ Title = "Missing File", Content = "Script file not found.", Duration = 3 })
            return
        end

        local success, content = pcall(readfile, filePath)
        if not success or not content then
            Fluent:Notify({ Title = "Error", Content = "Failed to read script file.", Duration = 3 })
            return
        end

        local uidLine, scriptContent = content:match("([^\n]*)\n(.+)")
        local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
        ScreenGui.Name = "DuckXHubManageGui"

        local Frame = Instance.new("Frame", ScreenGui)
        Frame.Size = UDim2.new(0, 400, 0, 300)
        Frame.Position = UDim2.new(0.5, -200, 0.5, -150)
        Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        Frame.BorderSizePixel = 0

        local UIDBox, ScriptBox

        local function addTextBox(labelText, defaultText, posY)
            local Label = Instance.new("TextLabel", Frame)
            Label.Text = labelText
            Label.Position = UDim2.new(0, 10, 0, posY)
            Label.Size = UDim2.new(0, 80, 0, 25)
            Label.TextColor3 = Color3.new(1, 1, 1)
            Label.BackgroundTransparency = 1
            Label.TextXAlignment = Enum.TextXAlignment.Left

            local TextBox = Instance.new("TextBox", Frame)
            TextBox.Text = defaultText
            TextBox.Position = UDim2.new(0, 100, 0, posY)
            TextBox.Size = UDim2.new(0, 280, 0, 25)
            TextBox.TextColor3 = Color3.new(1, 1, 1)
            TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            TextBox.ClearTextOnFocus = false
            return TextBox
        end

        UIDBox = addTextBox("UID:", uidLine or SelectedUID, 10)
        ScriptBox = addTextBox("Script:", scriptContent or "", 45)

        local function addButton(text, posY, callback)
            local Button = Instance.new("TextButton", Frame)
            Button.Text = text
            Button.Position = UDim2.new(0, 10, 0, posY)
            Button.Size = UDim2.new(1, -20, 0, 30)
            Button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            Button.TextColor3 = Color3.new(1, 1, 1)
            Button.MouseButton1Click:Connect(callback)
        end

        addButton("üíæ Save", 90, function()
            local editedUID = UIDBox.Text
            local editedScript = ScriptBox.Text
            if editedUID == "" or editedScript == "" then
                Fluent:Notify({ Title = "Missing Info", Content = "UID or script is missing.", Duration = 3 }); return
            end
            delfile(filePath)
            local newFile = fixedScriptFolder .. "/" .. editedUID .. "_script.lua"
            writefile(newFile, editedUID .. "\n" .. editedScript)
            UIDDropdown:SetValues(getUIDList())
            Fluent:Notify({ Title = "Saved", Content = "Script updated.", Duration = 3 })
        end)

        addButton("‚ñ∂Ô∏è Run", 130, function()
            local editedScript = ScriptBox.Text
            local ok, err = pcall(function()
                loadstring(editedScript)()
            end)
            if ok then
                Fluent:Notify({ Title = "Executed", Content = "Script for UID has run", Duration = 3 })
            else
                Fluent:Notify({ Title = "Error", Content = "Execution failed: " .. tostring(err), Duration = 3 })
            end
        end)

        addButton("üóë Delete", 170, function()
            delfile(filePath)
            UIDDropdown:SetValues(getUIDList())
            Fluent:Notify({ Title = "Deleted", Content = "Script deleted.", Duration = 3 })
            ScreenGui:Destroy()
        end)

        addButton("‚ùå Close", 210, function()
            ScreenGui:Destroy()
        end)
    end
})

Tabs.Scripts:AddToggle("AutoRunToggle", {
    Title = "Auto Run Selected Script",
    Default = false
})

local playerParagraph = Tabs.Server:AddParagraph({
    Title = "Player Count",
    Content = "Players in server: " .. tostring(#Players:GetPlayers())
})

Players.PlayerAdded:Connect(function()
    playerParagraph:SetContent("Players in server: " .. tostring(#Players:GetPlayers()))
end)

Players.PlayerRemoving:Connect(function()
    playerParagraph:SetContent("Players in server: " .. tostring(#Players:GetPlayers()))
end)


Tabs.Server:AddInput("JobIdInput", {
    Title = "JobId",
    Placeholder = "Paste JobId here",
    Callback = function(input)
        getgenv()._JoinJobId = input
    end
})

Tabs.Server:AddButton({
    Title = "Join Job by Id",
    Callback = function()
        if getgenv()._JoinJobId then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, getgenv()._JoinJobId)
        else
            Fluent:Notify({ Title = "Missing JobId", Content = "Please enter a JobId first.", Duration = 3 })
        end
    end
})

Tabs.Server:AddButton({
    Title = "Copy Current JobId",
    Callback = function()
        setclipboard(game.JobId)
        Fluent:Notify({ Title = "Copied", Content = "Current JobId copied to clipboard.", Duration = 3 })
    end
})

Tabs.Server:AddButton({
    Title = "Auto Hop Server",
    Callback = function()
        local function serverHop()
            local Servers = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")
            Servers = HttpService:JSONDecode(Servers)
            for _, v in pairs(Servers.data) do
                if v.playing < v.maxPlayers and v.id ~= game.JobId then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, v.id)
                    break
                end
            end
        end
        serverHop()
    end
})

-- Addons
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("DuckXHub")
if not isfolder("DuckXHub/Settings") then makefolder("DuckXHub/Settings") end
SaveManager:SetFolder("DuckXHub/Settings")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Auto-run UID script if enabled and file exists
task.spawn(function()
    task.wait(1)
    local autoRun = Options and Options.AutoRunToggle and Options.AutoRunToggle.Value or false
    if not autoRun then return end

    local uid = tostring(LocalPlayer.UserId)
    local uidFile, defaultFile = nil, fixedScriptFolder .. "/default_script.lua"

    -- T√¨m file kh·ªõp UID
    for _, f in ipairs(listfiles(fixedScriptFolder)) do
        if f:match("^.-/" .. uid .. "_.*%.lua$") then
            uidFile = f
            break
        end
    end

    local function tryRun(path, isUID)
    local success, content = pcall(readfile, path)
    if not success or not content or #content == 0 then return false end

    local script
    if isUID then
        local uidLine, scriptContent = content:match("([^\n]*)\n(.+)")
        if tostring(uidLine) ~= uid or not scriptContent then return false end
        script = scriptContent
    else
        script = content
    end

    local ok, err = pcall(function()
        loadstring(script)()
    end)
    if ok then
        Fluent:Notify({
            Title = "AutoRun",
            Content = "Running " .. path:match("([^/\\]+)$"),
            Duration = 3
        })
    else
        Fluent:Notify({
            Title = "AutoRun Error",
            Content = "Script execution failed: " .. tostring(err),
            Duration = 3
        })
    end
    return ok
end

    -- ∆Øu ti√™n ch·∫°y script UID, n·∫øu kh√¥ng c√≥ th√¨ ch·∫°y default
    if uidFile then
        tryRun(uidFile, true)
    elseif isfile(defaultFile) then
        tryRun(defaultFile, false)
    end
end)

local VirtualInputManager = game:GetService("VirtualInputManager")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "DuckXHubToggleMenu"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
ScreenGui.Parent = game:GetService("CoreGui")

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.02, 0, 0.2, 0)
ImageButton.Size = UDim2.new(0, 50, 0, 50)
ImageButton.Image = "rbxthumb://type=GamePass&id=243367649&w=150&h=150"
ImageButton.Draggable = true -- k√©o ƒë∆∞·ª£c
ImageButton.AutoButtonColor = true

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = ImageButton

ImageButton.MouseButton1Click:Connect(function()
	local minimizeKey = (getgenv().Fluent and getgenv().Fluent._minimizeKey) or Enum.KeyCode.LeftControl
	VirtualInputManager:SendKeyEvent(true, minimizeKey, false, game)
	task.wait(0.05)
	VirtualInputManager:SendKeyEvent(false, minimizeKey, false, game)
end)

Window:SelectTab(1)
Fluent:Notify({ Title = "DuckXHub", Content = "Script Loaded", Duration = 3 })
SaveManager:LoadAutoloadConfig()
